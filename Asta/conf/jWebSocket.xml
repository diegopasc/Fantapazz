<?xml version="1.0" encoding="UTF-8"?>
<!--
	Document   : jWebSocket.xml
	Created on : March 18, 2010, 10:24 AM
	Author     : aschulze, puran
	Description: Configuration of the jWebSocket Server.
	This includes engines, servers, plug-ins, filter, rights, roles and users 
	as well as logging.
-->

<!-- jWebSocket server configuration -->
<jWebSocket>
	<!--
		installation can be prod or dev.
		  'prod'- installation means all the classes will be loaded
		   from the jars defined in this configuration file
		  'dev' - installation means running directly from the source,
		   all the jar files given are ignored.
		   Default value if not specified would be 'prod'
	-->
	<installation>prod</installation>

	<!--
		define the protocol, default protocol if not specified is 'json'
		possible values are [json|xml|csv]
	-->
	<protocol>json</protocol>

	<!-- jWebSocket logging configuration -->
	<logging>
		<log4j>
			<!-- log4j appender, one of the following options [console|singlefile|rollingfile] -->
			<appender>console</appender>
			<!-- layout, please refer to http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p - %C{1}: %m%n</pattern>
			<!-- log-level, one of the following options: [all|debug|info|warn|error|fatal|off] -->
			<level>debug</level>
			<!-- filename, used only when appender != console -->
			<filename>jWebSocket.log</filename>
			<!-- controls write cache for logging -->
			<buffered>true</buffered>
			<!-- specifies the size of the write cache for logging -->
			<buffersize>65536</buffersize>
		</log4j>
	</logging>

	<!--
		initializer class required only in 'dev' mode so that client application can register custom servers,
		plugins at compile time for debugging capability to test custom plugins and servers without a need for
		jar files
	-->
	<initializerClass>org.jwebsocket.factory.JWebSocketInitializer</initializerClass>

	<!--
		 engines to be instantiated for jWebSocket, Only one engine will be initialized
		 and run. The topmost engine configured will be picked and run by the system.
	-->
	<!-- jWebSocket engine configuration -->
	<engines>
		<engine>
			<name>org.jwebsocket.tcp.engines.TCPEngine</name>
			<id>tcp0</id>
			<jar>jWebSocketTCPEngine-0.10.jar</jar>
			<port>8787</port>
			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>jwebsocket.org</domain>
				<domain>jwebsocket.com</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
		</engine>
	</engines>

	<!-- server types to be instantiated for jWebSocket -->
	<servers>
		<server>
			<name>org.jwebsocket.server.TokenServer</name>
			<id>ts0</id>
			<jar>jWebSocketTokenServer-0.10.jar</jar>
		</server>
	</servers>

	<!-- jWebSocket global rights -->
	<rights>
		<!-- configuration of system plug-in specific rights -->
		<right>
			<ns>org.jWebSocket.plugins.system</ns>
			<id>broadcast</id>
			<description>Broadcast message to all other clients.</description>
		</right>
		
		<right>
			<ns>org.jWebSocket.plugins.system</ns>
			<id>send</id>
			<description>Send message to a single target client.</description>
		</right>
		
		<!-- Caution! Be careful with this right!
				Unauthorized use could stop your server from
				providing its services! -->
		<right>
			<ns>org.jWebSocket.plugins.admin</ns>
			<id>shutdown</id>
			<description>Allow to shutdown the server</description>
		</right>
		<right>
			<ns>org.jWebSocket.plugins.admin</ns>
			<id>getConnections</id>
			<description>Allow to retreive current connections</description>
		</right>
	</rights>
	
	<!-- jWebSocket roles -->
	<roles>
		<role>
			<id>Administrator</id>
			<description>Administrators</description>
			<rights>
				<!-- list of rights for "Administrator" role (ns + . + id) -->
				<right>org.jWebSocket.plugins.system.broadcast</right>
				<right>org.jWebSocket.plugins.system.send</right>

				<!-- Caution! Be careful with this right!
						Unauthorized use could stop your server from
						providing its services! -->
				<right>org.jWebSocket.plugins.admin.shutdown</right>
				<right>org.jWebSocket.plugins.admin.getConnections</right>
			</rights>
		</role>
		<role>
			<id>User</id>
			<description>Registered and authenticated users.</description>
			<rights>
				<!-- list of rights for "User" role (ns + . + id) -->
				<right>org.jWebSocket.plugins.system.broadcast</right>
				<right>org.jWebSocket.plugins.system.send</right>
			</rights>
		</role>
		<role>
			<id>Guest</id>
			<description>Anonymous users (not registered)</description>
			<rights>
				<!-- list of rights for "Guest" role (ns + . + id) -->
				<right>org.jWebSocket.plugins.system.broadcast</right>
				<right>org.jWebSocket.plugins.system.send</right>
			</rights>
		</role>
	</roles>

	<!-- plug-ins to be instantiated for jWebSocket -->
	<plugins>
	
		<plugin>
			<name>org.jwebsocket.plugins.system.SystemPlugIn</name>
			<ns>org.jWebSocket.plugins.system</ns>
			<id>jws.system</id>
			<jar>jWebSocketServer-0.10.jar</jar>
			<!-- plug-in specific settings -->
			<settings>
				<!-- specify whether open, close, login, logout events should be broadcasted per default -->
				<setting key="broadcastOpenEvent">true</setting>
				<setting key="broadcastCloseEvent">true</setting>
				<setting key="broadcastLoginEvent">true</setting>
				<setting key="broadcastLogoutEvent">true</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		
		<plugin>
			<name>org.jwebsocket.plugins.admin.AdminPlugIn</name>
			<id>jws.admin</id>
			<ns>org.jWebSocket.plugins.admin</ns>
			<jar>jWebSocketServer-0.10.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="allowShutdown">true</setting>
			</settings>
		</plugin>
		
		<plugin>
			<name>org.jwebsocket.plugins.flashbridge.FlashBridgePlugIn</name>
			<id>jws.flashbridge</id>
			<ns>org.jWebSocket.plugins.flashbridge</ns>
			<jar>jWebSocketServer-0.10.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		
		<!--
		<plugin>
			<name>it.fantapazz.websocket.AstaControllerPlugin</name>
			<id>jws.asta</id>
			<ns>org.jWebSocket.plugins.asta.controller</ns>
			<jar>jWebSocketServer-0.10.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		-->

		<!--
		<plugin>
			<name>it.fantapazz.websocket.Asta</name>
			<id>jws.asta</id>
			<ns>org.jwebSocket.plugins.asta</ns>
			<jar>jWebSocketServer-0.10.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="port">5555</setting>
			</settings>
		</plugin>
		-->
		
	</plugins>

	<!-- filters to be instantiated for jWebSocket -->
	<filters>
		<filter>
			<name>org.jwebsocket.filters.system.SystemFilter</name>
			<ns>org.jWebSocket.filters.system</ns>
			<id>systemFilter</id>
			<jar>jWebSocketPlugins-0.10.jar</jar>
			<!-- plug-in specific settings -->
			<settings>
				<setting key="key">value</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
		<filter>
			<name>org.jwebsocket.filters.custom.CustomTokenFilter</name>
			<id>userFilter</id>
			<ns>org.jWebSocket.filters.custom</ns>
			<jar>jWebSocketPlugins-0.10.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
	</filters>

	<!-- jWebSocket users -->
	<users>
		<user>
			<loginname>aschulze</loginname>
			<firstname>Alexander</firstname>
			<lastname>Schulze</lastname>
			<password>t0p-s3cr3t</password>
			<description>jWebSocket Founder</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Administrator</role>
				<role>User</role>
				<role>Guest</role>
			</roles>
		</user>
		<user>
			<loginname>stojadinovicp</loginname>
			<firstname>Predrag</firstname>
			<lastname>Stojadinovic</lastname>
			<password>t0p-s3cr3t</password>
			<description>jWebSocket Committer</description>
			<status>1</status>
			<roles>
				<role>Administrator</role>
				<role>User</role>
				<role>Guest</role>
			</roles>
		</user>
		<user>
			<loginname>psingh</loginname>
			<firstname>Puran</firstname>
			<lastname>Singh</lastname>
			<password>t0p-s3cr3t</password>
			<description>jWebSocket Committer</description>
			<status>1</status>
			<roles>
				<role>Administrator</role>
				<role>User</role>
				<role>Guest</role>
			</roles>
		</user>
		<user>
			<loginname>guest</loginname>
			<firstname>Mr./Mrs.</firstname>
			<lastname>Guest</lastname>
			<!-- no password means that the user does not need a password -->
			<password></password>
			<description>jWebSocket Guest</description>
			<status>1</status>
			<roles>
				<!-- should be restricted in your application! open for demo purposes only! -->
				<role>Administrator</role>
				<role>User</role>
				<role>Guest</role>
			</roles>
		</user>
	</users>
</jWebSocket>